<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin - Cancelled Orders</title>
  <link rel="stylesheet" href="/styles/global.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
</head>
<body class="bg-[var(--color-gray-50)] text-[var(--color-black)] h-screen overflow-x-hidden relative font-sans">
  <%- include('../shared/asideBar') %>
  <%- include('../shared/adminheader') %>

  <!-- Main Content -->
  <div id="mainContent" class="p-root-5 w-full transition-filter duration-300 ease-in-out">
    <div class="pt-16">
      <div class="max-w-7xl mx-auto">
        <!-- Messages -->
        <div id="message-container" class="mb-6"></div>

        <!-- Cancelled Orders Table -->
        <div class="bg-[var(--color-white)] p-6 rounded-lg shadow-lg">
          <h2 class="text-xl font-semibold text-[var(--color-black)] mb-4">Cancelled Orders</h2>
          <div class="overflow-x-auto scrollbar-thin scrollbar-thumb-[var(--color-gray-400)] scrollbar-track-[var(--color-gray-100)]">
            <table class="min-w-full table-auto">
              <thead class="bg-[var(--color-gray-50)] text-[var(--color-gray-700)]">
                <tr>
                  <th class="px-4 py-3 text-left w-1/5">Order ID</th>
                  <th class="px-4 py-3 text-left w-1/5">User Email</th>
                  <th class="px-4 py-3 text-left w-1/5">Total</th>
                  <th class="px-4 py-3 text-left w-1/5">Cancelled On</th>
                  <th class="px-4 py-3 text-left w-1/5">Actions</th>
                </tr>
              </thead>
              <tbody class="text-[var(--color-gray-700)]" id="cancelledOrderList">
                <!-- Populated via AJAX -->
              </tbody>
            </table>
            <p id="noResults" class="text-center text-[var(--color-red-500)] font-semibold hidden mt-4">No cancelled orders found</p>
          </div>
        </div>

        <!-- Pagination Controls -->
        <div class="flex justify-center mt-6">
          <nav id="pagination" aria-label="Pagination" class="inline-flex -space-x-px rounded-md shadow-sm"></nav>
        </div>
      </div>
    </div>
  </div>

  <script type="module">
    document.addEventListener("DOMContentLoaded", function () {
      const cancelledOrderList = document.getElementById('cancelledOrderList');
      const noResults = document.getElementById('noResults');
      const pagination = document.getElementById('pagination');
      const messageContainer = document.getElementById('message-container');
      let currentPage = 1;

      // Fetch cancelled orders function
      async function fetchCancelledOrders(page) {
        try {
          const response = await fetch(`/admin/cancel-order?page=${page}`, {
            headers: { "X-Requested-With": "XMLHttpRequest" },
          });
          console.log("Fetch status:", response.status);
          const result = await response.json();
          console.log("Fetch data:", result);

          if (response.ok) {
            updateCancelledOrderTable(result.cancelledOrders);
            updatePagination(result.currentPage, result.totalPages);
            currentPage = result.currentPage;
          } else {
            console.error("❌ Fetch Cancelled Orders Error:", result.error);
            showMessage("Error fetching cancelled orders.", "error");
          }
        } catch (error) {
          console.error("❌ AJAX Fetch Error:", error);
          showMessage("Network error. Please try again.", "error");
        }
      }

      // Update cancelled order table
      function updateCancelledOrderTable(cancelledOrders) {
        cancelledOrderList.innerHTML = "";
        if (!cancelledOrders || cancelledOrders.length === 0) {
          cancelledOrderList.innerHTML = '<tr><td colspan="5" class="text-center text-[var(--color-red-500)] font-semibold py-4">No cancelled orders found.</td></tr>';
          noResults.classList.remove('hidden');
        } else {
          cancelledOrders.forEach(order => {
            try {
              const row = `
                <tr class="border-t border-[var(--color-gray-200)] cancelled-order-row" data-order-id="${order.orderId || 'N/A'}">
                  <td class="px-4 py-[1rem]">${order.orderId || 'N/A'}</td>
                  <td class="px-4 py-2">${order.user?.email || 'Unknown'}</td>
                  <td class="px-4 py-2">Rs ${order.totalAmount?.toFixed(2) || '0.00'}</td>
                  <td class="px-4 py-2">${order.cancelledAt ? new Date(order.cancelledAt).toLocaleDateString() : 'N/A'}</td>
                  <td class="px-4 py-2 flex items-center gap-3">
                    <button class="view-btn text-[var(--color-blue-500)] hover:text-[var(--color-blue-700)] transition-colors duration-300" data-order-id="${order.orderId || 'N/A'}">
                      <i class="bi bi-eye"></i>
                    </button>
                    <button class="delete-btn text-[var(--color-red-500)] hover:text-[var(--color-red-700)] transition-colors duration-300" data-order-id="${order.orderId || 'N/A'}" data-page="${currentPage}">
                      <i class="bi bi-trash"></i>
                    </button>
                  </td>
                </tr>
                <tr id="details-${order.orderId || 'N/A'}" class="hidden border-t border-[var(--color-gray-200)]">
                  <td colspan="5" class="px-4 py-2 bg-[var(--color-gray-50)]">
                    <div class="space-y-2">
                      ${order.items?.length ? order.items.map(item => `
                        <div class="flex justify-between">
                          <span>${item.name || 'Unknown'} (x${item.quantity || 0})</span>
                          <span>Rs ${(item.price && item.quantity ? (item.price * item.quantity).toFixed(2) : '0.00')}</span>
                        </div>
                      `).join('') : '<p>No items available</p>'}
                      <p class="text-[var(--color-red-500)] font-semibold">Cancellation Reason: ${order.cancellationReason || 'Not specified'}</p>
                      <p>Billing Address: ${order.billingInfo?.streetAddress || 'N/A'}, ${order.billingInfo?.townCity || 'N/A'}</p>
                      <p>Phone: ${order.billingInfo?.phoneNumber || 'N/A'}</p>
                      <p>Payment Method: ${order.paymentMethod || 'N/A'}</p>
                      <p>Originally Placed: ${order.originalCreatedAt ? new Date(order.originalCreatedAt).toLocaleDateString() : 'N/A'}</p>
                    </div>
                  </td>
                </tr>`;
              cancelledOrderList.insertAdjacentHTML("beforeend", row);
            } catch (error) {
              console.error(`Error rendering order ${order.orderId}:`, error);
            }
          });
          noResults.classList.add('hidden');

          // Add View Event Listeners
          document.querySelectorAll('.view-btn').forEach(button => {
            button.addEventListener('click', function () {
              const orderId = this.getAttribute('data-order-id');
              const detailsRow = document.getElementById(`details-${orderId}`);
              detailsRow.classList.toggle('hidden');
            });
          });

          // Add Delete Event Listeners
          document.querySelectorAll('.delete-btn').forEach(button => {
            button.addEventListener('click', async function () {
              const orderId = this.getAttribute('data-order-id');
              const page = this.getAttribute('data-page');
              if (confirm(`Are you sure you want to delete cancelled order ${orderId}?`)) {
                try {
                  const response = await fetch(`/admin/cancel-order/delete`, {
                    method: 'DELETE', // Changed to POST
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ orderId, page }), // Send orderId and page in body
                  });
                  const result = await response.json();
                  console.log("Delete response:", result); // Log response
                  if (response.ok) {
                    showMessage(result.message || 'Cancelled order deleted successfully!', 'success');
                    updateCancelledOrderTable(result.cancelledOrders); // Update table with new data
                    updatePagination(result.currentPage, result.totalPages); // Update pagination
                    currentPage = result.currentPage;
                  } else {
                    showMessage(result.error || 'Error deleting cancelled order', 'error');
                  }
                } catch (error) {
                  console.error('Error deleting cancelled order:', error);
                  showMessage('Network error. Please try again.', 'error');
                }
              }
            });
          });
        }
      }

      // Update pagination
      function updatePagination(currentPage, totalPages) {
        const maxVisiblePages = 5;
        let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
        let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
        if (endPage - startPage + 1 < maxVisiblePages) {
          startPage = Math.max(1, endPage - maxVisiblePages + 1);
        }

        pagination.innerHTML = '';

        const prevButton = document.createElement('a');
        prevButton.href = '#';
        prevButton.className = 'pagination-btn flex items-center justify-center px-3 h-8 leading-tight text-[var(--color-gray-500)] bg-[var(--color-white)] border border-[var(--color-gray-300)] rounded-l-lg hover:bg-[var(--color-gray-100)] hover:text-[var(--color-gray-700)] transition-all duration-300';
        prevButton.innerHTML = '<span class="sr-only">Previous</span><i class="bi bi-arrow-bar-left"></i>';
        prevButton.addEventListener('click', (e) => {
          e.preventDefault();
          if (currentPage > 1) fetchCancelledOrders(currentPage - 1);
        });
        pagination.appendChild(prevButton);

        for (let i = startPage; i <= endPage; i++) {
          const pageLink = document.createElement('a');
          pageLink.href = '#';
          pageLink.className = `pagination-link flex items-center justify-center px-3 h-8 leading-tight border border-[var(--color-gray-300)] transition-all duration-300 ${i === currentPage ? 'text-[var(--color-red-500)] bg-[var(--color-red-50)] hover:bg-[var(--color-red-100)] hover:text-[var(--color-red-700)]' : 'text-[var(--color-gray-500)] bg-[var(--color-white)] hover:bg-[var(--color-gray-100)] hover:text-[var(--color-gray-700)]'}`;
          pageLink.textContent = i;
          pageLink.addEventListener('click', (e) => {
            e.preventDefault();
            fetchCancelledOrders(i);
          });
          pagination.appendChild(pageLink);
        }

        const nextButton = document.createElement('a');
        nextButton.href = '#';
        nextButton.className = 'pagination-btn flex items-center justify-center px-3 h-8 leading-tight text-[var(--color-gray-500)] bg-[var(--color-white)] border border-[var(--color-gray-300)] rounded-r-lg hover:bg-[var(--color-gray-100)] hover:text-[var(--color-gray-700)] transition-all duration-300';
        nextButton.innerHTML = '<span class="sr-only">Next</span><i class="bi bi-arrow-bar-right"></i>';
        nextButton.addEventListener('click', (e) => {
          e.preventDefault();
          if (currentPage < totalPages) fetchCancelledOrders(currentPage + 1);
        });
        pagination.appendChild(nextButton);
      }

      // Show Message
      function showMessage(text, type) {
        const div = document.createElement("div");
        div.className = `p-4 rounded-md text-center font-medium ${type === "success" ? "bg-[var(--color-green-100)] text-[var(--color-green-500)]" : "bg-[var(--color-red-100)] text-[var(--color-red-500)]"}`;
        div.textContent = text;
        messageContainer.appendChild(div);
        setTimeout(() => div.remove(), 5000);
      }

      // Initial Fetch
      fetchCancelledOrders(currentPage);
    });
  </script>
  <script src="/js/adminjs.js"></script>
</body>
</html>