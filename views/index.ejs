<%- include('./shared/header') %>




<section class="flex flex-row items-start p-4 lg:mt-[7rem] mt-[8rem] w-full h-[80vh]">
  <div class="w-full xlg:ml-3 opacity-0 translate-y-10 transition-all duration-500" data-scroll>
    <div class="w-full relative">
      <div class="swiper default-carousel swiper-container">
        <div class="swiper-wrapper">
          <% carouselImages.forEach((image) => { %>
          <div class="swiper-slide">
            <div class="flex-col rounded-2xl h-full flex justify-center items-center overflow-hidden">
              <img src="<%= image %>" class="w-full h-[80vh] object-cover">
              <div class="absolute inset-0 bg-gradient-to-t from-gray-900 via-gray-900/40 flex items-end p-4">
                <button class="z-10 text-2xl hover:underline text-white p-2">Shop Now</button>
              </div>
            </div>
          </div>
          <% }) %>
        </div>

        <button id="slider-button-left"
          class="swiper-button-prev group p-2 flex justify-center items-center border border-solid border-red-600 w-12 h-12 transition-all duration-500 rounded-full left-5 hover:bg-red-500">
          <svg class="h-5 w-5 text-red-600 group-hover:text-white" xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 16 16" fill="none">
            <path d="M10 12L6 8l4-4" stroke="currentColor" stroke-width="1.6" stroke-linecap="round"
              stroke-linejoin="round" />
          </svg>
        </button>
        <button id="slider-button-right"
          class="swiper-button-next group p-2 flex justify-center items-center border border-solid border-red-600 w-12 h-12 transition-all duration-500 rounded-full right-5 hover:bg-red-500">
          <svg class="h-5 w-5 text-red-600 group-hover:text-white" xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 16 16" fill="none">
            <path d="M6 4l4 4-4 4" stroke="currentColor" stroke-width="1.6" stroke-linecap="round"
              stroke-linejoin="round" />
          </svg>
        </button>

        <div class="swiper-pagination"></div>
      </div>
    </div>
  </div>
</section>




<% Object.keys(categorizedProducts).forEach(category => { %>
  <section class="p-4 md:px-16 mt-8">
      <div class="flex items-center justify-between">
          <div class="flex items-center gap-2">
              <div class="w-2 h-6 bg-red-500 rounded"></div>
              <p class="text-red-500 font-semibold"><%= category %></p>
          </div>
      </div>
      <div class="flex items-center justify-between flex-col md:flex-row">
          <h2 class="text-3xl font-bold text-center md:text-left"><%= category.replace(/-/g, ' ') %></h2>
          
          <% if (category === "Flash Sales") { %>
              <!-- Timer for Flash Sales -->
              <div class="flex space-x-6 text-center mt-4 md:mt-0">
                  <div><span class="text-2xl font-bold">23</span><p class="text-gray-500 text-sm">Hours</p></div>
                  <span class="text-red-500 text-2xl">:</span>
                  <div><span class="text-2xl font-bold">19</span><p class="text-gray-500 text-sm">Minutes</p></div>
                  <span class="text-red-500 text-2xl">:</span>
                  <div><span class="text-2xl text-red-500 font-bold">56</span><p class="text-red-500 text-sm">Seconds</p></div>
              </div>

          <% } %>
          <div class="flex md:justify-end justify-center items-center mt-4 space-x-4 mr-4">
            <button class="slider-button left-button  bg-[#F5F5F5]  p-3 rounded-full transition duration-300">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-left text-red-600" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8"/>
              </svg>
            </button>
    
            <button class="slider-button right-button bg-[#F5F5F5]  p-3 rounded-full transition duration-300">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-right text-red-600" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M1 8a.5.5 0 0 1 .5-.5h11.793l-3.147-3.146a.5.5 0 0 1 .708-.708l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 0 1-.708-.708L13.293 8.5H1.5A.5.5 0 0 1 1 8"/>
              </svg>
            </button>
          </div>
      </div>
      <div class="relative border-b border-gray-500">
          <div class="slider-container flex overflow-x-scroll scrollbar-hide space-x-6 p-4 mt-6 mb-8">
              <% categorizedProducts[category].forEach(product => { %>
                  <div class="bg-[#F5F5F5] h-96 md:w-80 w-72 flex-shrink-0 relative group overflow-hidden rounded-lg shadow-lg 
                  opacity-0 translate-y-10 transition-all duration-700 hover:translate-y-[-10px]"  
                  data-scroll>
                      <img src="<%= product.image %>" alt="<%=product.name%>" class="h-full w-full object-cover ">
                      
                      <!-- Hover Buttons -->
                    <div class="absolute top-4 right-4 flex flex-col gap-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                      <button class="p-2 bg-white rounded-full shadow hover:bg-gray-100 dark:text-black transition duration-300 relative group/button wishlist-btn"
                      data-product-id="<%= product._id %>"
                      data-wishlist="false"> <!-- Default value, will be updated via JavaScript -->
                      <i class="bi bi-heart" data-heart-icon></i>
                      <span class="absolute left-[-61px] top-1/2 -translate-y-1/2 px-2 py-1 bg-gray-800 text-white text-xs rounded opacity-0 group-hover/button:opacity-100 transition-opacity duration-300">
                          Add
                      </span>
                  </button>                  
                  
                  

                  

                      
                        <button class="quick-view-btn p-2 bg-white rounded-full shadow hover:bg-gray-100 dark:text-black transition duration-300 relative group/button"
                                data-name="<%= product.name %>"
                                data-image="<%= product.image %>"
                                data-price="<%= product.price %>"
                                data-discountprice="<%= product.discountPrice %>"
                                data-description="<%= product.description || 'No description available.' %>">
                                
                          <i class="bi bi-eye"></i> <!-- Quick View Icon -->
                          <span class="absolute left-[-80px] top-1/2 -translate-y-1/2 px-2 py-1 bg-gray-800 text-white text-xs rounded opacity-0 group-hover/button:opacity-100 transition-opacity duration-300">Quick View</span>
                        </button>
                      
                      
                        <button class="add-to-cart-btn p-2 bg-white rounded-full shadow hover:bg-gray-100 dark:text-black transition duration-300 relative group/button"
                          data-product-id="<%= product._id %>"
                          data-cart="false"> <!-- Default value, will be updated via JavaScript -->
                          <i class="bi bi-cart"></i> <!-- Add to Cart Icon -->
                          <span class="absolute left-[-80px] top-1/2 -translate-y-1/2 px-2 py-1 bg-gray-800 text-white text-xs rounded opacity-0 group-hover/button:opacity-100 transition-opacity duration-300">
                              Add to Cart
                          </span>
                      </button>

                
                    </div>
                    <!-- product info -->
                      <div class="absolute bottom-0 left-0 right-0 bg-white/90 dark:text-black p-4 translate-y-20 group-hover:translate-y-0 transition-all duration-300">
                          <h3 class="font-bold mb-2"><%= product.name %></h3>
                          <div class="flex justify-between items-center">
                            <div>
                              <span class="font-bold">Rs : <%= product.price %></span>
                              <span class="text-sm line-through ml-2">Rs<%= product.discountPrice %></span>
                            </div>
                          </div>
                      </div>
                  </div>
              <% }); %>
          </div>
      </div>
  </section>
<% }); %>



<div id="quickViewModal"
  class="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center opacity-0 pointer-events-none transition-all duration-300 z-50">
  <div class="bg-white w-96 p-6 rounded-lg relative">
    <button onclick="closeQuickView()"
      class="absolute top-4 right-4 text-xl font-bold dark:text-black text-gray-600">X</button>
    <h3 id="modalProductName" class="font-bold mb-4 dark:text-black"></h3>
    <img id="modalProductImage" src="" alt="Product" class="w-full h-60 object-cover mb-4">
    <div class="flex justify-between mb-4 dark:text-black">
      <span id="modalProductPrice" class="font-bold"></span>
      <span id="modalProductOldPrice" class="text-sm line-through"></span>
    </div>
    <p id="modalProductDesc" class="text-sm text-gray-600 dark:text-black"></p>
  </div>
</div>



  
  






  
  <%- include('./shared/footer') %>

 
 <script>
 document.addEventListener("DOMContentLoaded", function () {
  document.querySelectorAll(".quick-view-btn").forEach(button => {
    button.addEventListener("click", function () {
      const modal = document.getElementById("quickViewModal");
      const productName = document.getElementById("modalProductName");
      const productImage = document.getElementById("modalProductImage");
      const productPrice = document.getElementById("modalProductPrice");
      const productOldPrice = document.getElementById("modalProductOldPrice");
      const productDesc = document.getElementById("modalProductDesc");

      // Update modal content using data attributes
      productName.innerText = this.getAttribute("data-name");
      productImage.src = this.getAttribute("data-image");
      productPrice.innerText = `Rs : ${this.getAttribute("data-price")}`;
      productOldPrice.innerText = `Rs : ${this.getAttribute("data-discountprice")}`;
      productDesc.innerText = this.getAttribute("data-description");

      // Show the modal
      modal.classList.remove("opacity-0", "pointer-events-none");
      modal.classList.add("opacity-100", "pointer-events-auto");
    });
  });
});

function closeQuickView() {
  const modal = document.getElementById("quickViewModal");
  modal.classList.remove("opacity-100", "pointer-events-auto");
  modal.classList.add("opacity-0", "pointer-events-none");
}


 </script>

  



  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const elements = document.querySelectorAll("[data-scroll]");
  
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              entry.target.classList.add("opacity-100", "translate-y-0");
              entry.target.classList.remove("opacity-0", "translate-y-10");
            }
          });
        },
        { threshold: 0.1 }
      );
  
      elements.forEach((el) => observer.observe(el));
    });
  </script>
  


    <script>

let swiper = new Swiper(".default-carousel", {
        loop: true, // Enables infinite loop
        autoplay: {
        delay: 4000, // Auto-slide every 3 seconds
        disableOnInteraction: false,
        },
        pagination: {
          el: ".swiper-pagination",
          clickable: true,
        },
        navigation: {
          nextEl: ".swiper-button-next",
          prevEl: ".swiper-button-prev",
        },
      });

      // Select all left and right buttons
const leftButtons = document.querySelectorAll('.left-button');
const rightButtons = document.querySelectorAll('.right-button');
const sliders = document.querySelectorAll('.slider-container');

// Loop through all left and right buttons and add event listeners
leftButtons.forEach((button, index) => {
  button.addEventListener('click', function () {
    sliders[index].scrollBy({ left: -300, behavior: 'smooth' });
  });
});

rightButtons.forEach((button, index) => {
  button.addEventListener('click', function () {
    sliders[index].scrollBy({ left: 300, behavior: 'smooth' });
  });
});

      // Check if dark mode preference is saved in localStorage
      // if (localStorage.getItem('darkMode') === 'true') {
      //   document.documentElement.classList.add('dark');
      // }

      // // Function to toggle dark mode
      // const darkModeToggle = document.getElementById('darkModeToggle');
      // darkModeToggle.addEventListener('click', () => {
      //   document.documentElement.classList.toggle('dark');
      //   // Save dark mode preference in localStorage
      //   if (document.documentElement.classList.contains('dark')) {
      //     localStorage.setItem('darkMode', 'true');
      //   } else {
      //     localStorage.setItem('darkMode', 'false');
      //   }
      // });

    
     
    

      // let currentIndex = 0;
      // const carouselItems = document.getElementById('carousel-items');
      // const totalItems = document.querySelectorAll('#carousel-items .flex-shrink-0').length;
      // // Get the icon elements
      // const prevIcon = document.getElementById('prev-icon');
      // const nextIcon = document.getElementById('next-icon');

      // // Add event listeners for hover
      // prevIcon.addEventListener('mouseenter', () => {
      //   prevIcon.classList.remove('bi-arrow-left-circle');
      //   prevIcon.classList.add('bi-arrow-left-circle-fill');
      // });

      // prevIcon.addEventListener('mouseleave', () => {
      //   prevIcon.classList.remove('bi-arrow-left-circle-fill');
      //   prevIcon.classList.add('bi-arrow-left-circle');
      // });

      // nextIcon.addEventListener('mouseenter', () => {
      //   nextIcon.classList.remove('bi-arrow-right-circle');
      //   nextIcon.classList.add('bi-arrow-right-circle-fill');
      // });

      // nextIcon.addEventListener('mouseleave', () => {
      //   nextIcon.classList.remove('bi-arrow-right-circle-fill');
      //   nextIcon.classList.add('bi-arrow-right-circle');
      // });

      // prevIcon.addEventListener('click', () => {
      //   currentIndex = (currentIndex - 1 + totalItems) % totalItems;
      //   updateCarousel();
      // });

      // nextIcon.addEventListener('click', () => {
      //   currentIndex = (currentIndex + 1) % totalItems;
      //   updateCarousel();
      // });

      // function updateCarousel() {
      //   carouselItems.style.transform = `translateX(-${currentIndex * 100}%)`;
      // }
    </script>



  

<!-- <script>
document.addEventListener("DOMContentLoaded", function () {
    document.querySelectorAll(".add-to-cart-btn").forEach(button => {
        button.addEventListener("click", function () {
            const productId = this.dataset.productId; // Get Product ID from button attribute
            
            // Send AJAX request to add the product to the cart
            fetch("user/cart/add", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ productId }) // Send product ID in request body
            })
            .then(response => response.json()) // Convert response to JSON
            .then(data => {
               if (data.message === "User not authenticated.") {
                    // Redirect to login page if user is not authenticated
                    window.location.href = '/auth/login';
                } 
            })
            .catch(error => console.error("Error:", error)); // Log errors
        });
    });
});

 </script> -->

<!-- <script>
  document.addEventListener("DOMContentLoaded", function () {
      document.querySelectorAll(".wishlist-btn").forEach(button => {
          button.addEventListener("click", function () {
              const productId = this.dataset.productId; // Get Product ID from button attribute
              const button = this; // Store the button reference for later
              const heartIcon = button.querySelector("[data-heart-icon]"); // Get heart icon
  
              // Send AJAX request to toggle the product in the wishlist (add/remove)
              fetch("user/wishlist/add", {
                  method: "POST",
                  headers: {
                      "Content-Type": "application/json"
                  },
                  body: JSON.stringify({ productId }) // Send product ID in request body
              })
              .then(response => response.json()) // Convert response to JSON
              .then(data => {
                  if (data.success) {
                      // If the product was added to the wishlist
                      if (data.message === "Product added to wishlist.") {
                          alert("✅ Product added to wishlist!");
                          heartIcon.classList.add("text-red-500"); // Change icon to filled (red heart)
                          heartIcon.classList.remove("bi-heart"); // Change to filled heart icon class
                          heartIcon.classList.add("bi-heart-fill");
                          button.querySelector("span").innerText = "Remove"; // Change button text
                      }
                      // If the product was removed from the wishlist
                      else if (data.message === "Product removed from wishlist.") {
                          alert("❌ Product removed from wishlist!");
                          heartIcon.classList.remove("text-red-500"); // Remove filled icon style
                          heartIcon.classList.add("bi-heart"); // Change back to empty heart icon class
                          heartIcon.classList.remove("bi-heart-fill");
                          button.querySelector("span").innerText = "Add"; // Reset button text
                      }
                  } else {
                      if (data.message === "Please log in to modify your wishlist.") {
                          window.location.href = '/auth/login'; // Redirect to login page if not logged in
                      } else {
                          alert("❌ " + data.message); // Show error message
                      }
                  }
              })
              .catch(error => console.error("Error:", error)); // Log errors
          });
      });
  });
  </script> -->
  
<!-- Link the JavaScript file -->
<script type="module" src="/js/wihlist.js"></script>