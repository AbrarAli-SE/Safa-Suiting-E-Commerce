<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin - Payment Management</title>
  <link rel="stylesheet" href="/styles/global.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
</head>

<body class="bg-[var(--color-gray-50)] text-[var(--color-black)] h-screen overflow-x-hidden relative font-sans">
  <%- include('../shared/asideBar') %>

  <%- include('../shared/adminheader') %>
  <!-- Main Content -->
  <div id="mainContent" class="p-root-5 w-full transition-filter duration-300 ease-in-out">
    

    <div class="pt-16">

    <div class="max-w-7xl mx-auto">
      <!-- Messages -->
      <div id="message-container" class="mb-6"></div>

      <!-- Payments Table -->
      <div class="bg-[var(--color-white)] p-6 rounded-lg shadow-lg">
        <h2 class="text-xl font-semibold text-[var(--color-black)] mb-4">Payments List</h2>
        <div class="overflow-x-auto scrollbar-thin scrollbar-thumb-[var(--color-gray-400)] scrollbar-track-[var(--color-gray-100)]">
          <table class="min-w-full table-fixed" id="paymentsTable">
            <thead class="bg-[var(--color-gray-50)] text-[var(--color-gray-700)]">
              <tr>
                <th class="px-4 py-3 text-left w-1/5">Payment ID</th>
                <th class="px-4 py-3 text-left w-1/5">Order ID</th>
                <th class="px-4 py-3 text-left w-1/5">Customer Name</th>
                <th class="px-4 py-3 text-left w-1/5">Amount</th>
                <th class="px-4 py-3 text-left w-1/5">Received</th>
              </tr>
            </thead>
            <tbody class="text-[var(--color-gray-700)]" id="paymentsList">
              <!-- Populated via AJAX -->
            </tbody>
          </table>
          <p id="noResults" class="text-center text-[var(--color-red-500)] font-semibold hidden mt-4">No payments found</p>
        </div>
      </div>

      <!-- Pagination Controls -->
      <div class="flex justify-center mt-6">
        <nav id="pagination" aria-label="Pagination" class="inline-flex -space-x-px rounded-md shadow-sm"></nav>
      </div>
    </div>
    </div>
  </div>

  <!-- <script type="module" src="/js/adminPayments.js"></script> -->
  <script type="module" src="/js/adminjs.js"></script>
  <script>
    document.addEventListener("DOMContentLoaded", function () {
  const paymentsList = document.getElementById("paymentsList");
  const noResults = document.getElementById("noResults");
  const pagination = document.getElementById("pagination");
  const messageContainer = document.getElementById("message-container");
  let currentPage = 1;

  // Fetch initial payments
  fetchPayments(currentPage);

  // AJAX Toggle Received Status
  paymentsList.addEventListener("click", async function (e) {
    const button = e.target.closest(".toggle-received-btn");
    if (!button) return;

    const paymentId = button.dataset.paymentId;
    const currentReceived = button.dataset.received === "true";

    try {
      const response = await fetch("/admin/payments/toggle-received", {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ paymentId, received: !currentReceived, page: currentPage }),
      });

      const result = await response.json();
      messageContainer.innerHTML = "";

      if (response.ok) {
        showMessage(result.message, "success");
        updatePaymentsTable(result.payments);
        updatePagination(result.currentPage, result.totalPages);
        currentPage = result.currentPage;
      } else {
        showMessage(result.error || "An error occurred.", "error");
      }
    } catch (error) {
      console.error("❌ AJAX Toggle Received Error:", error);
      showMessage("Network error. Please try again.", "error");
    }
  });

  // AJAX Pagination
  pagination.addEventListener("click", async function (e) {
    const target = e.target.closest(".page-link");
    if (!target) return;

    e.preventDefault();
    const page = parseInt(target.dataset.page);
    fetchPayments(page);
  });

  // Fetch payments function
  async function fetchPayments(page) {
    try {
      const response = await fetch(`/admin/payments?page=${page}`, {
        headers: { "X-Requested-With": "XMLHttpRequest" },
      });

      const result = await response.json();

      if (response.ok) {
        updatePaymentsTable(result.payments);
        updatePagination(result.currentPage, result.totalPages);
        currentPage = result.currentPage;
      } else {
        console.error("❌ Fetch Payments Error:", result.error);
        showMessage("Error fetching payments.", "error");
      }
    } catch (error) {
      console.error("❌ AJAX Fetch Error:", error);
      showMessage("Network error. Please try again.", "error");
    }
  }

  // Update payments table
  function updatePaymentsTable(payments) {
    paymentsList.innerHTML = "";
    if (!payments || payments.length === 0) {
      paymentsList.innerHTML = '<tr><td colspan="5" class="text-center text-[var(--color-red-500)] font-semibold py-4">No payments found.</td></tr>';
      noResults.classList.remove("hidden");
    } else {
      payments.forEach(payment => {
        const row = `
          <tr class="border-t border-[var(--color-gray-200)]" data-payment-id="${payment._id}">
            <td class="px-4 py-2">${payment._id}</td>
            <td class="px-4 py-2">${payment.orderId}</td>
            <td class="px-4 py-2">${payment.customerName}</td>
            <td class="px-4 py-2">$${payment.amount.toFixed(2)}</td>
            <td class="px-4 py-2 flex items-center gap-2">
              <span class="${payment.received ? 'text-[var(--color-green-500)]' : 'text-[var(--color-red-500)]'}">
                ${payment.received ? 'Yes' : 'No'}
              </span>
              <button class="toggle-received-btn text-[var(--color-blue-500)] hover:text-[var(--color-blue-700)] transition-colors duration-300" data-payment-id="${payment._id}" data-received="${payment.received}">
                Change
              </button>
            </td>
          </tr>`;
        paymentsList.insertAdjacentHTML("beforeend", row);
      });
      noResults.classList.add("hidden");
    }
  }

  // Update pagination
  function updatePagination(currentPage, totalPages) {
    const maxVisiblePages = 5;
    let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
    let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
    if (endPage - startPage + 1 < maxVisiblePages) {
      startPage = Math.max(1, endPage - maxVisiblePages + 1);
    }

    pagination.innerHTML = '';

    // Previous Button
    const prevButton = document.createElement('a');
    prevButton.href = '#';
    prevButton.className = 'page-link flex items-center justify-center px-3 h-8 leading-tight text-[var(--color-gray-500)] bg-[var(--color-white)] border border-[var(--color-gray-300)] rounded-l-lg hover:bg-[var(--color-gray-100)] hover:text-[var(--color-gray-700)] transition-all duration-300';
    prevButton.innerHTML = '<span class="sr-only">Previous</span><i class="bi bi-arrow-bar-left"></i>';
    prevButton.addEventListener('click', (e) => {
      e.preventDefault();
      if (currentPage > 1) fetchPayments(currentPage - 1);
    });
    pagination.appendChild(prevButton);

    // Page Numbers
    for (let i = startPage; i <= endPage; i++) {
      const pageLink = document.createElement('a');
      pageLink.href = '#';
      pageLink.className = `page-link flex items-center justify-center px-3 h-8 leading-tight border border-[var(--color-gray-300)] transition-all duration-300 ${i === currentPage ? 'text-[var(--color-red-500)] bg-[var(--color-red-50)] hover:bg-[var(--color-red-100)] hover:text-[var(--color-red-700)]' : 'text-[var(--color-gray-500)] bg-[var(--color-white)] hover:bg-[var(--color-gray-100)] hover:text-[var(--color-gray-700)]'}`;
      pageLink.textContent = i;
      pageLink.addEventListener('click', (e) => {
        e.preventDefault();
        fetchPayments(i);
      });
      pagination.appendChild(pageLink);
    }

    // Next Button
    const nextButton = document.createElement('a');
    nextButton.href = '#';
    nextButton.className = 'page-link flex items-center justify-center px-3 h-8 leading-tight text-[var(--color-gray-500)] bg-[var(--color-white)] border border-[var(--color-gray-300)] rounded-r-lg hover:bg-[var(--color-gray-100)] hover:text-[var(--color-gray-700)] transition-all duration-300';
    nextButton.innerHTML = '<span class="sr-only">Next</span><i class="bi bi-arrow-bar-right"></i>';
    nextButton.addEventListener('click', (e) => {
      e.preventDefault();
      if (currentPage < totalPages) fetchPayments(currentPage + 1);
    });
    pagination.appendChild(nextButton);
  }

  // Show message helper
  function showMessage(text, type) {
    const div = document.createElement("div");
    div.className = `p-4 rounded-md text-center font-medium ${type === "success" ? "bg-[var(--color-green-100)] text-[var(--color-green-500)]" : "bg-[var(--color-red-100)] text-[var(--color-red-500)]"}`;
    div.textContent = text;
    messageContainer.appendChild(div);
    setTimeout(() => div.remove(), 5000);
  }
});
  </script>
</body>
</html>