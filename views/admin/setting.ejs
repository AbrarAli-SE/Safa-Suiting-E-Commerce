<%- include('../shared/asideBar') %>

<main class="flex-grow p-8 ml-0 sm:ml-20 lg:ml-64 overflow-hidden">
  <h1 class="text-4xl font-bold mb-8 sm:mt-7 mt-9 text-gray-800 dark:text-gray-100 flex items-center">
    <i class="bi bi-gear-fill mr-2 text-[#DB4444]"></i> Profile Settings
  </h1>

  <!-- Breadcrumb & Welcome -->
  <div class="flex justify-between items-center mb-8">
    <nav class="flex space-x-2 text-sm text-gray-500 dark:text-gray-400">
      <a href="/admin/intro" class="hover:text-gray-900 dark:hover:text-gray-200">Home</a>
      <span>/</span>
      <span class="text-gray-900 dark:text-red-500 transition">Settings</span>
    </nav>
    <div class="flex items-center space-x-4">
      <div id="welcome-message" class="text-sm text-gray-700 dark:text-gray-300">
        Welcome! <span class="text-red-500 dark:text-red-400"><%= user.name %></span>
      </div>
    </div>
  </div>

  <!-- Messages -->
  <div id="message-container" class="mb-6"></div>

  <!-- Profile Update Form -->
  <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg mb-8">
    <h2 class="text-2xl font-semibold text-gray-800 dark:text-gray-100 mb-4 flex items-center">
      <i class="bi bi-person-fill mr-2 text-[#DB4444]"></i> Update Profile
    </h2>
    <form id="profileForm" class="space-y-6">
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div class="space-y-2">
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Full Name</label>
          <input type="text" id="name" name="name" value="<%= user.name %>" class="w-full p-2 border rounded-md bg-gray-50 dark:bg-gray-700 dark:text-gray-300 focus:ring-2 focus:ring-red-400 focus:outline-none transition" required>
          <div id="nameError" class="text-red-500 text-sm hidden"></div>
        </div>
        <div class="space-y-2">
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Email</label>
          <input type="email" id="email" name="email" value="<%= user.email %>" class="w-full p-2 border rounded-md bg-gray-50 dark:bg-gray-700 dark:text-gray-300 focus:ring-2 focus:ring-red-400 focus:outline-none transition" required>
          <div id="emailError" class="text-red-500 text-sm hidden"></div>
        </div>
      </div>
      <div class="flex justify-end space-x-4">
        <button type="reset" class="px-4 py-2 text-sm text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-200">Cancel</button>
        <button type="submit" class="px-4 py-2 text-sm text-white bg-red-500 rounded-md hover:bg-red-600 transition">Save Changes</button>
      </div>
    </form>
  </div>

  <!-- Password Change Form -->
  <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg">
    <h2 class="text-2xl font-semibold text-gray-800 dark:text-gray-100 mb-4 flex items-center">
      <i class="bi bi-lock-fill mr-2 text-[#DB4444]"></i> Change Password
    </h2>
    <form id="passwordForm" class="space-y-6">
      <div class="space-y-4">
        <input type="password" id="currentPassword" name="currentPassword" placeholder="Current Password" class="w-full p-2 border rounded-md bg-gray-50 dark:bg-gray-700 dark:text-gray-300 focus:ring-2 focus:ring-red-400 focus:outline-none transition" required>
        <div id="currentPasswordError" class="text-red-500 text-sm hidden"></div>
        <input type="password" id="newPassword" name="newPassword" placeholder="New Password" class="w-full p-2 border rounded-md bg-gray-50 dark:bg-gray-700 dark:text-gray-300 focus:ring-2 focus:ring-red-400 focus:outline-none transition" required>
        <div id="newPasswordError" class="text-red-500 text-sm hidden"></div>
        <input type="password" id="confirmPassword" name="confirmPassword" placeholder="Confirm New Password" class="w-full p-2 border rounded-md bg-gray-50 dark:bg-gray-700 dark:text-gray-300 focus:ring-2 focus:ring-red-400 focus:outline-none transition" required>
        <div id="confirmPasswordError" class="text-red-500 text-sm hidden"></div>
      </div>
      <div class="flex justify-end">
        <button type="submit" class="px-4 py-2 text-sm text-white bg-red-500 rounded-md hover:bg-red-600 transition">Change Password</button>
      </div>
    </form>
  </div>
</main>

<!-- Bootstrap Icons -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">
<script src="/js/main.js"></script>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    const profileForm = document.getElementById("profileForm");
    const passwordForm = document.getElementById("passwordForm");
    const messageContainer = document.getElementById("message-container");
    const welcomeMessage = document.getElementById("welcome-message");
    const nameInput = document.getElementById("name");
    const emailInput = document.getElementById("email");
    const currentPassword = document.getElementById("currentPassword");
    const newPassword = document.getElementById("newPassword");
    const confirmPassword = document.getElementById("confirmPassword");
    const nameError = document.getElementById("nameError");
    const emailError = document.getElementById("emailError");
    const currentPasswordError = document.getElementById("currentPasswordError");
    const newPasswordError = document.getElementById("newPasswordError");
    const confirmPasswordError = document.getElementById("confirmPasswordError");

    // Validation Functions
    function validateName() {
      const nameValue = nameInput.value.trim();
      if (nameValue.length === 0) {
        nameError.classList.add("hidden");
        return false;
      }
      if (nameValue.length < 3) {
        nameError.textContent = "Name must be at least 3 characters long.";
        nameError.classList.remove("hidden");
        return false;
      }
      nameError.classList.add("hidden");
      return true;
    }

    function validateEmail() {
      const emailValue = emailInput.value.trim();
      const emailPattern = /^[a-zA-Z0-9._%+-]+@gmail\.com$/;
      if (emailValue.length === 0) {
        emailError.classList.add("hidden");
        return false;
      }
      if (!emailPattern.test(emailValue)) {
        emailError.textContent = "Enter a valid Gmail address.";
        emailError.classList.remove("hidden");
        return false;
      }
      emailError.classList.add("hidden");
      return true;
    }

    function validateCurrentPassword() {
      const value = currentPassword.value.trim();
      if (value.length === 0) {
        currentPasswordError.classList.add("hidden");
        return false;
      }
      currentPasswordError.classList.add("hidden");
      return true;
    }

    function validateNewPassword() {
      const value = newPassword.value.trim();
      if (value.length === 0) {
        newPasswordError.classList.add("hidden");
        return false;
      }
      if (value.length < 6) {
        newPasswordError.textContent = "Password must be at least 6 characters long.";
        newPasswordError.classList.remove("hidden");
        return false;
      }
      newPasswordError.classList.add("hidden");
      return true;
    }

    function validateConfirmPassword() {
      const value = confirmPassword.value.trim();
      if (value.length === 0) {
        confirmPasswordError.classList.add("hidden");
        return false;
      }
      if (value !== newPassword.value) {
        confirmPasswordError.textContent = "Passwords do not match.";
        confirmPasswordError.classList.remove("hidden");
        return false;
      }
      confirmPasswordError.classList.add("hidden");
      return true;
    }

    // Input Listeners
    nameInput.addEventListener("input", validateName);
    emailInput.addEventListener("input", validateEmail);
    currentPassword.addEventListener("input", validateCurrentPassword);
    newPassword.addEventListener("input", validateNewPassword);
    confirmPassword.addEventListener("input", validateConfirmPassword);

    // AJAX Profile Update
    profileForm.addEventListener("submit", async function (e) {
      e.preventDefault();
      if (!validateName() || !validateEmail()) return;

      const formData = new FormData(profileForm);
      const data = Object.fromEntries(formData);

      try {
        const response = await fetch("/admin/update-profile", {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(data),
          credentials: "include",
        });

        const result = await response.json();
        messageContainer.innerHTML = "";

        if (response.ok) {
          showMessage(result.message, "success");
          // Update all UI elements with user data
          nameInput.value = result.user.name;
          emailInput.value = result.user.email;
          welcomeMessage.innerHTML = `Welcome! <span class="text-red-500 dark:text-red-400">${result.user.name}</span>`;
        } else {
          showMessage(result.error || "An error occurred.", "error");
        }
      } catch (error) {
        console.error("‚ùå AJAX Profile Update Error:", error);
        showMessage("Network error. Please try again.", "error");
      }
    });

    // AJAX Password Change
    passwordForm.addEventListener("submit", async function (e) {
      e.preventDefault();
      if (!validateCurrentPassword() || !validateNewPassword() || !validateConfirmPassword()) return;

      const formData = new FormData(passwordForm);
      const data = Object.fromEntries(formData);

      try {
        const response = await fetch("/admin/change-password", {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(data),
          credentials: "include",
        });

        const result = await response.json();
        messageContainer.innerHTML = "";

        if (response.ok) {
          showMessage(result.message, "success");
          passwordForm.reset();
        } else {
          showMessage(result.error || "An error occurred.", "error");
        }
      } catch (error) {
        console.error("‚ùå AJAX Password Change Error:", error);
        showMessage("Network error. Please try again.", "error");
      }
    });

    // Show Message Helper
    function showMessage(text, type) {
      const div = document.createElement("div");
      div.className = `p-4 rounded-md text-center font-medium ${
        type === "success" ? "bg-green-100 text-green-700" : "bg-red-100 text-red-700"
      }`;
      div.textContent = text;
      messageContainer.appendChild(div);
      setTimeout(() => div.remove(), 5000);
    }
  });
</script>
</body>
</html>