<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin - Profile</title>
  <link rel="stylesheet" href="/styles/global.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
</head>

<body class="bg-[var(--color-gray-50)] text-[var(--color-black)] h-screen overflow-x-hidden relative font-sans">
  <%- include('../shared/asideBar') %>

  <!-- Main Content -->
  <div id="mainContent" class="p-5 w-full transition-all duration-300 ease-in-out">
    <!-- Header -->
    <div class="flex items-center bg-[var(--color-white)] p-3 border-b border-[var(--color-gray-300)] mb-6 shadow-sm">
      <button 
        id="menuToggle" 
        class="text-[var(--color-black)] text-2xl p-2 hover:text-[var(--color-red-500)] transition-colors duration-300 bg-transparent border-none cursor-pointer ">
        ☰
      </button>
      <h1 class="text-[var(--color-black)] text-2xl  flex-grow">Welcome, <span id="welcome-message"><%= user.name %></span></h1>
    </div>

    <div class="max-w-7xl mx-auto">
      <!-- Messages -->
      <div id="message-container" class="mb-6"></div>

      <!-- Profile Update Form -->
      <div class="bg-[var(--color-white)] p-6 rounded-lg shadow-lg mb-8">
        <h2 class="text-2xl font-semibold text-[var(--color-black)] mb-4 flex items-center">
          <i class="bi bi-person-fill mr-2 text-[var(--color-red-500)]"></i> Update Profile
        </h2>
        <form id="profileForm" class="space-y-6">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div class="space-y-2">
              <label for="name" class="block text-sm font-medium text-[var(--color-black)]">Full Name</label>
              <input 
                type="text" 
                id="name" 
                name="name" 
                value="<%= user.name %>" 
                class="w-full p-3 bg-[var(--color-gray-50)] border border-[var(--color-gray-300)] rounded-md focus:outline-none focus:ring-2 focus:ring-[var(--color-red-500)] transition-all duration-300 shadow-sm hover:shadow-md" 
                required />
              <div id="nameError" class="text-[var(--color-red-500)] text-sm hidden"></div>
            </div>
            <div class="space-y-2">
              <label for="email" class="block text-sm font-medium text-[var(--color-black)]">Email</label>
              <input 
                type="email" 
                id="email" 
                name="email" 
                value="<%= user.email %>" 
                class="w-full p-3 bg-[var(--color-gray-50)] border border-[var(--color-gray-300)] rounded-md focus:outline-none focus:ring-2 focus:ring-[var(--color-red-500)] transition-all duration-300 shadow-sm hover:shadow-md" 
                required />
              <div id="emailError" class="text-[var(--color-red-500)] text-sm hidden"></div>
            </div>
          </div>
          <div class="flex justify-end space-x-4">
            <button type="reset" class="px-4 py-2 text-sm text-[var(--color-gray-600)] hover:text-[var(--color-gray-900)] transition-colors duration-300">Cancel</button>
            <button 
              type="submit" 
              class="px-4 py-2 text-sm text-[var(--color-white)] bg-[var(--color-red-500)] rounded-md hover:bg-[var(--color-red-700)] transition-all duration-300 shadow-md hover:shadow-lg">
              Save Changes
            </button>
          </div>
        </form>
      </div>

      <!-- Password Change Form -->
      <div class="bg-[var(--color-white)] p-6 rounded-lg shadow-lg">
        <h2 class="text-2xl font-semibold text-[var(--color-black)] mb-4 flex items-center">
          <i class="bi bi-lock-fill mr-2 text-[var(--color-red-500)]"></i> Change Password
        </h2>
        <form id="passwordForm" class="space-y-6">
          <div class="space-y-4">
            <input 
              type="password" 
              id="currentPassword" 
              name="currentPassword" 
              placeholder="Current Password" 
              class="w-full p-3 bg-[var(--color-gray-50)] border border-[var(--color-gray-300)] rounded-md focus:outline-none focus:ring-2 focus:ring-[var(--color-red-500)] transition-all duration-300 shadow-sm hover:shadow-md" 
              required />
            <div id="currentPasswordError" class="text-[var(--color-red-500)] text-sm hidden"></div>
            <input 
              type="password" 
              id="newPassword" 
              name="newPassword" 
              placeholder="New Password" 
              class="w-full p-3 bg-[var(--color-gray-50)] border border-[var(--color-gray-300)] rounded-md focus:outline-none focus:ring-2 focus:ring-[var(--color-red-500)] transition-all duration-300 shadow-sm hover:shadow-md" 
              required />
            <div id="newPasswordError" class="text-[var(--color-red-500)] text-sm hidden"></div>
            <input 
              type="password" 
              id="confirmPassword" 
              name="confirmPassword" 
              placeholder="Confirm New Password" 
              class="w-full p-3 bg-[var(--color-gray-50)] border border-[var(--color-gray-300)] rounded-md focus:outline-none focus:ring-2 focus:ring-[var(--color-red-500)] transition-all duration-300 shadow-sm hover:shadow-md" 
              required />
            <div id="confirmPasswordError" class="text-[var(--color-red-500)] text-sm hidden"></div>
          </div>
          <div class="flex justify-end">
            <button 
              type="submit" 
              class="px-4 py-2 text-sm text-[var(--color-white)] bg-[var(--color-red-500)] rounded-md hover:bg-[var(--color-red-700)] transition-all duration-300 shadow-md hover:shadow-lg">
              Change Password
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- <script type="module" src="/js/adminProfile.js"></script> -->
   <script>
    document.addEventListener("DOMContentLoaded", function () {
  const profileForm = document.getElementById("profileForm");
  const passwordForm = document.getElementById("passwordForm");
  const messageContainer = document.getElementById("message-container");
  const welcomeMessage = document.getElementById("welcome-message");
  const nameInput = document.getElementById("name");
  const emailInput = document.getElementById("email");
  const currentPassword = document.getElementById("currentPassword");
  const newPassword = document.getElementById("newPassword");
  const confirmPassword = document.getElementById("confirmPassword");
  const nameError = document.getElementById("nameError");
  const emailError = document.getElementById("emailError");
  const currentPasswordError = document.getElementById("currentPasswordError");
  const newPasswordError = document.getElementById("newPasswordError");
  const confirmPasswordError = document.getElementById("confirmPasswordError");

  // Validation Functions
  function validateName() {
    const nameValue = nameInput.value.trim();
    if (nameValue.length === 0) {
      nameError.classList.add("hidden");
      return false;
    }
    if (nameValue.length < 3) {
      nameError.textContent = "Name must be at least 3 characters long.";
      nameError.classList.remove("hidden");
      return false;
    }
    nameError.classList.add("hidden");
    return true;
  }

  function validateEmail() {
    const emailValue = emailInput.value.trim();
    const emailPattern = /^[a-zA-Z0-9._%+-]+@gmail\.com$/;
    if (emailValue.length === 0) {
      emailError.classList.add("hidden");
      return false;
    }
    if (!emailPattern.test(emailValue)) {
      emailError.textContent = "Enter a valid Gmail address.";
      emailError.classList.remove("hidden");
      return false;
    }
    emailError.classList.add("hidden");
    return true;
  }

  function validateCurrentPassword() {
    const value = currentPassword.value.trim();
    if (value.length === 0) {
      currentPasswordError.classList.add("hidden");
      return false;
    }
    currentPasswordError.classList.add("hidden");
    return true;
  }

  function validateNewPassword() {
    const value = newPassword.value.trim();
    if (value.length === 0) {
      newPasswordError.classList.add("hidden");
      return false;
    }
    if (value.length < 6) {
      newPasswordError.textContent = "Password must be at least 6 characters long.";
      newPasswordError.classList.remove("hidden");
      return false;
    }
    newPasswordError.classList.add("hidden");
    return true;
  }

  function validateConfirmPassword() {
    const value = confirmPassword.value.trim();
    if (value.length === 0) {
      confirmPasswordError.classList.add("hidden");
      return false;
    }
    if (value !== newPassword.value) {
      confirmPasswordError.textContent = "Passwords do not match.";
      confirmPasswordError.classList.remove("hidden");
      return false;
    }
    confirmPasswordError.classList.add("hidden");
    return true;
  }

  // Input Listeners
  nameInput.addEventListener("input", validateName);
  emailInput.addEventListener("input", validateEmail);
  currentPassword.addEventListener("input", validateCurrentPassword);
  newPassword.addEventListener("input", validateNewPassword);
  confirmPassword.addEventListener("input", validateConfirmPassword);

  // AJAX Profile Update
  profileForm.addEventListener("submit", async function (e) {
    e.preventDefault();
    if (!validateName() || !validateEmail()) return;

    const formData = new FormData(profileForm);
    const data = Object.fromEntries(formData);

    try {
      const response = await fetch("/admin/update-profile", {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
        credentials: "include",
      });

      const result = await response.json();
      messageContainer.innerHTML = "";

      if (response.ok) {
        showMessage(result.message, "success");
        nameInput.value = result.user.name;
        emailInput.value = result.user.email;
        welcomeMessage.textContent = result.user.name;
      } else {
        showMessage(result.error || "An error occurred.", "error");
      }
    } catch (error) {
      console.error("❌ AJAX Profile Update Error:", error);
      showMessage("Network error. Please try again.", "error");
    }
  });

  // AJAX Password Change
  passwordForm.addEventListener("submit", async function (e) {
    e.preventDefault();
    if (!validateCurrentPassword() || !validateNewPassword() || !validateConfirmPassword()) return;

    const formData = new FormData(passwordForm);
    const data = Object.fromEntries(formData);

    try {
      const response = await fetch("/admin/change-password", {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
        credentials: "include",
      });

      const result = await response.json();
      messageContainer.innerHTML = "";

      if (response.ok) {
        showMessage(result.message, "success");
        passwordForm.reset();
      } else {
        showMessage(result.error || "An error occurred.", "error");
      }
    } catch (error) {
      console.error("❌ AJAX Password Change Error:", error);
      showMessage("Network error. Please try again.", "error");
    }
  });

  // Show Message Helper
  function showMessage(text, type) {
    const div = document.createElement("div");
    div.className = `p-4 rounded-md text-center font-medium ${
      type === "success" ? "bg-[var(--color-green-100)] text-[var(--color-green-500)]" : "bg-[var(--color-red-100)] text-[var(--color-red-500)]"
    }`;
    div.textContent = text;
    messageContainer.appendChild(div);
    setTimeout(() => div.remove(), 5000);
  }
});
   </script>
   
 <!-- Link the JavaScript file -->
 <script src="/js/adminjs.js"></script>
</body>
</html>