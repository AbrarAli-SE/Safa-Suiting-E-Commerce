<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin - Contact Management</title>
  <link rel="stylesheet" href="/styles/global.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
</head>

<body class="bg-[var(--color-gray-50)] text-[var(--color-black)] h-screen overflow-x-hidden relative font-sans">
  <%- include('../shared/asideBar') %>
  <%- include('../shared/adminheader') %>
  
  <div id="mainContent" class="p-root-5 w-full transition-filter duration-300 ease-in-out">
    <div class="pt-16">
      <div class="max-w-7xl mx-auto">
        <div id="message-container" class="mb-6"></div>

        <div class="bg-[var(--color-white)] p-6 rounded-lg shadow-lg">
          <h2 class="text-xl font-semibold text-[var(--color-black)] mb-4">Contact Submissions</h2>
          <div class="overflow-x-auto scrollbar-thin scrollbar-thumb-[var(--color-gray-400)] scrollbar-track-[var(--color-gray-100)]">
            <table class="min-w-full table-auto">
              <thead class="bg-[var(--color-gray-50)] text-[var(--color-gray-700)]">
                <tr>
                  <th class="px-4 py-3 text-left w-1/6">Name</th>
                  <th class="px-4 py-3 text-left w-1/6">Email</th>
                  <th class="px-4 py-3 text-left w-1/6">Phone</th>
                  <th class="px-4 py-3 text-left w-2/6">Message</th>
                  <th class="px-4 py-3 text-left w-1/6">Date</th>
                  <th class="px-4 py-3 text-left w-1/6">Status</th>
                  <th class="px-4 py-3 text-left w-1/6">Actions</th>
                </tr>
              </thead>
              <tbody class="text-[var(--color-gray-700)]" id="contactList"></tbody>
            </table>
            <p id="noResults" class="text-center text-[var(--color-red-500)] font-semibold hidden mt-4">No contacts found</p>
          </div>
        </div>

        <div class="flex justify-center mt-6">
          <nav id="pagination" aria-label="Pagination" class="inline-flex -space-x-px rounded-md shadow-sm"></nav>
        </div>

        <div id="contactModal" class="fixed inset-0 bg-[var(--color-black)] bg-opacity-50 flex justify-center items-center hidden z-50">
          <div id="modalContent" class="bg-[var(--color-white)] p-6 rounded-xl shadow-2xl w-[500px] relative transform scale-95 transition-all duration-300">
            <button id="closeModalBtn" class="absolute top-4 right-4 w-10 h-10 bg-[var(--color-red-500)] text-[var(--color-white)] rounded-full flex items-center justify-center hover:bg-[var(--color-red-700)] transition-all duration-300">
              <i class="bi bi-x-lg text-xl"></i>
            </button>
            <h2 class="text-xl font-bold text-[var(--color-red-500)] mb-4">Contact Message</h2>
            <div class="mb-4">
              <p><strong>Name:</strong> <span id="modalName"></span></p>
              <p><strong>Email:</strong> <span id="modalEmail"></span></p>
              <p><strong>Phone:</strong> <span id="modalPhone"></span></p>
              <p><strong>Date:</strong> <span id="modalDate"></span></p>
              <p><strong>Status:</strong> <span id="modalStatus"></span></p>
              <p><strong>Message:</strong></p>
              <p id="modalMessage" class="bg-[var(--color-gray-50)] p-3 rounded-md mt-2 text-[var(--color-gray-700)]"></p>
              <p><strong>Reply (if sent):</strong></p>
              <p id="modalReplyMessage" class="bg-[var(--color-gray-50)] p-3 rounded-md mt-2 text-[var(--color-gray-700)]"></p>
            </div>
            
            <div class="mt-6">
              <h3 class="text-lg font-semibold text-[var(--color-black)] mb-2">Reply to User</h3>
              <form id="replyForm">
                <input type="hidden" id="modalContactId">
                <textarea id="replyMessage" class="w-full p-3 border border-[var(--color-gray-300)] rounded-md focus:outline-none focus:ring-2 focus:ring-[var(--color-red-500)] resize-y min-h-[100px]" placeholder="Type your reply here..." required></textarea>
                <button type="submit" class="mt-3 w-full bg-[var(--color-red-500)] text-[var(--color-white)] py-2 px-4 rounded-md hover:bg-[var(--color-red-700)] transition-all duration-300 flex items-center justify-center gap-2">
                  <i class="bi bi-send"></i> Send Reply
                </button>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script type="module" src="/js/adminjs.js"></script>
  <script>
    function closeModal() {
      const modal = document.getElementById("contactModal");
      const modalContent = document.getElementById("modalContent");
      modal.classList.add("hidden");
      modalContent.classList.remove('scale-100');
      modalContent.classList.add('scale-95');
      document.body.style.overflow = 'auto';
      document.getElementById("replyForm").reset();
    }

    document.addEventListener("DOMContentLoaded", function () {
      const contactList = document.getElementById('contactList');
      const noResults = document.getElementById('noResults');
      const pagination = document.getElementById('pagination');
      const messageContainer = document.getElementById('message-container');
      const closeModalBtn = document.getElementById('closeModalBtn');
      let currentPage = 1;

      // Attach event listener to close button
      closeModalBtn.addEventListener('click', closeModal);

      async function fetchContacts(page) {
        try {
          const response = await fetch(`/admin/contacts?page=${page}`, {
            headers: { "X-Requested-With": "XMLHttpRequest" },
          });

          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }

          const result = await response.json();
          updateContactTable(result.contacts);
          updatePagination(result.currentPage, result.totalPages);
          currentPage = result.currentPage;
        } catch (error) {
          console.error("‚ùå Fetch Contacts Error:", error);
          showMessage("Error fetching contacts: " + error.message, "error");
        }
      }

      function updateContactTable(contacts) {
        contactList.innerHTML = "";
        if (!contacts || contacts.length === 0) {
          contactList.innerHTML = '<tr><td colspan="7" class="text-center text-[var(--color-red-500)] font-semibold py-4">No contact submissions found.</td></tr>';
          noResults.classList.remove('hidden');
        } else {
          contacts.forEach(contact => {
            const row = `
              <tr class="border-t border-[var(--color-gray-200)] contact-row" data-contact-id="${contact._id}">
                <td class="px-4 py-2">${contact.name}</td>
                <td class="px-4 py-2">${contact.email}</td>
                <td class="px-4 py-2">${contact.phone || 'N/A'}</td>
                <td class="px-4 py-2">${contact.message.substring(0, 20)}...</td>
                <td class="px-4 py-2">${new Date(contact.createdAt).toLocaleString()}</td>
                <td class="px-4 py-2">
                  <span class="capitalize ${contact.replyStatus === 'replied' ? 'text-[var(--color-green-500)]' : 'text-[var(--color-red-500)]'}">
                    ${contact.replyStatus || 'Pending'}
                  </span>
                </td>
                <td class="px-4 py-2 flex items-center gap-3">
                  <button class="view-btn text-[var(--color-black-500)] hover:text-[var(--color-red-700)] transition-colors duration-300"
                    data-contact-id="${contact._id}"
                    data-name="${contact.name}"
                    data-email="${contact.email}"
                    data-phone="${contact.phone || 'N/A'}"
                    data-message="${contact.message}"
                    data-date="${new Date(contact.createdAt).toLocaleString()}"
                    data-status="${contact.replyStatus || 'Pending'}"
                    data-reply-message="${contact.replyMessage || ''}"><i class="bi bi-eye"></i></button>
                  <button class="delete-btn text-[var(--color-red-500)] hover:text-[var(--color-red-700)] transition-colors duration-300" data-contact-id="${contact._id}" data-page="${currentPage}"><i class="bi bi-trash"></i></button>
                </td>
              </tr>`;
            contactList.insertAdjacentHTML("beforeend", row);
          });
          noResults.classList.add('hidden');
        }

        document.querySelectorAll('.view-btn').forEach(button => {
          button.addEventListener('click', function () {
            document.getElementById("modalName").textContent = this.dataset.name;
            document.getElementById("modalEmail").textContent = this.dataset.email;
            document.getElementById("modalPhone").textContent = this.dataset.phone;
            document.getElementById("modalMessage").textContent = this.dataset.message;
            document.getElementById("modalDate").textContent = this.dataset.date;
            document.getElementById("modalStatus").textContent = this.dataset.status;
            document.getElementById("modalReplyMessage").textContent = this.dataset.replyMessage || 'No reply sent yet';
            document.getElementById("modalContactId").value = this.dataset.contactId;
            const modal = document.getElementById("contactModal");
            const modalContent = document.getElementById("modalContent");
            modal.classList.remove("hidden");
            modalContent.classList.remove('scale-95');
            modalContent.classList.add('scale-100');
            document.body.style.overflow = 'hidden';
          });
        });

        document.querySelectorAll('.delete-btn').forEach(button => {
          button.addEventListener('click', async function () {
            const contactId = this.getAttribute('data-contact-id');
            const page = this.getAttribute('data-page');
            if (confirm('Are you sure you want to delete this contact submission?')) {
              try {
                const response = await fetch("/admin/contacts/delete", {
                  method: 'DELETE',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({ contactId, page }),
                });
                const result = await response.json();
                if (response.ok) {
                  showMessage('Contact deleted successfully!', 'success');
                  fetchContacts(page);
                } else {
                  showMessage(result.message || 'Error deleting contact', 'error');
                }
              } catch (error) {
                console.error('Error deleting contact:', error);
                showMessage('Network error: ' + error.message, 'error');
              }
            }
          });
        });
      }

      document.getElementById('replyForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        const contactId = document.getElementById('modalContactId').value;
        const replyMessage = document.getElementById('replyMessage').value;
        const email = document.getElementById('modalEmail').textContent;

        try {
          const response = await fetch('/admin/contacts/reply', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ contactId, replyMessage, email })
          });

          const result = await response.json();

          if (!response.ok) {
            throw new Error(result.message || `HTTP error! status: ${response.status}`);
          }

          showMessage('Reply sent successfully!', 'success');
          closeModal();
          await fetchContacts(currentPage);
        } catch (error) {
          console.error('Error sending reply:', error);
          showMessage('Error sending reply: ' + error.message, 'error');
        }
      });

      function updatePagination(currentPage, totalPages) {
        const maxVisiblePages = 5;
        let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
        let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
        if (endPage - startPage + 1 < maxVisiblePages) {
          startPage = Math.max(1, endPage - maxVisiblePages + 1);
        }

        pagination.innerHTML = '';

        const prevButton = document.createElement('a');
        prevButton.href = '#';
        prevButton.className = 'pagination-btn flex items-center justify-center px-3 h-8 leading-tight text-[var(--color-gray-500)] bg-[var(--color-white)] border border-[var(--color-gray-300)] rounded-l-lg hover:bg-[var(--color-gray-100)] hover:text-[var(--color-gray-700)] transition-all duration-300';
        prevButton.innerHTML = '<span class="sr-only">Previous</span><i class="bi bi-arrow-bar-left"></i>';
        prevButton.addEventListener('click', (e) => {
          e.preventDefault();
          if (currentPage > 1) fetchContacts(currentPage - 1);
        });
        pagination.appendChild(prevButton);

        for (let i = startPage; i <= endPage; i++) {
          const pageLink = document.createElement('a');
          pageLink.href = '#';
          pageLink.className = `pagination-link flex items-center justify-center px-3 h-8 leading-tight border border-[var(--color-gray-300)] transition-all duration-300 ${i === currentPage ? 'text-[var(--color-red-500)] bg-[var(--color-red-50)] hover:bg-[var(--color-red-100)] hover:text-[var(--color-red-700)]' : 'text-[var(--color-gray-500)] bg-[var(--color-white)] hover:bg-[var(--color-gray-100)] hover:text-[var(--color-gray-700)]'}`;
          pageLink.textContent = i;
          pageLink.addEventListener('click', (e) => {
            e.preventDefault();
            fetchContacts(i);
          });
          pagination.appendChild(pageLink);
        }

        const nextButton = document.createElement('a');
        nextButton.href = '#';
        nextButton.className = 'pagination-btn flex items-center justify-center px-3 h-8 leading-tight text-[var(--color-gray-500)] bg-[var(--color-white)] border border-[var(--color-gray-300)] rounded-r-lg hover:bg-[var(--color-gray-100)] hover:text-[var(--color-gray-700)] transition-all duration-300';
        nextButton.innerHTML = '<span class="sr-only">Next</span><i class="bi bi-arrow-bar-right"></i>';
        nextButton.addEventListener('click', (e) => {
          e.preventDefault();
          if (currentPage < totalPages) fetchContacts(currentPage + 1);
        });
        pagination.appendChild(nextButton);
      }

      function showMessage(text, type) {
        const div = document.createElement("div");
        div.className = `p-4 rounded-md text-center font-medium ${type === "success" ? "bg-[var(--color-green-100)] text-[var(--color-green-500)]" : "bg-[var(--color-red-100)] text-[var(--color-red-500)]"}`;
        div.textContent = text;
        messageContainer.appendChild(div);
        setTimeout(() => div.remove(), 5000);
      }

      fetchContacts(currentPage);
    });
  </script>
</body>
</html>